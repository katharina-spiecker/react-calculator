{"version":3,"sources":["logo.svg","components/display.js","components/calculator-box.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Display","id","this","props","value","Component","Calculator","state","isResult","displayInnerText","event","setState","target","innerText","addOperator","test","length","newVal","slice","addDecimal","dot","singleNumberArr","split","clearNumber","calculate","numbersArr","map","str","Number","operatorsArr","match","result","i","onClick","App","className","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9edfbb1a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\nimport \"../App.css\";\n\nclass Display extends Component {\n  render() {\n    return <div id=\"display\">{this.props.value}</div>;\n  }\n}\n\nexport default Display;\n","import React, { Component } from \"react\";\nimport Display from \"./display\";\nimport \"../App.css\";\n\nclass Calculator extends Component {\n  state = {\n    value: 0,\n    isResult: false,\n  };\n\n  displayInnerText = (event) => {\n    //if current value is zero or the from past calculations: replace value\n    if (this.state.value == 0 || this.state.isResult) {\n      this.setState({\n        value: event.target.innerText,\n        isResult: false,\n      });\n    } else {\n      this.setState({\n        value: this.state.value + event.target.innerText,\n      });\n    }\n  };\n\n  addOperator = (event) => {\n    //if the last character is an operator replace it\n    // 5 *- 5 -> -5\n    //if last value is operator and new operator is not \"-\" then replace old with new one\n    if (this.state.isResult) {\n      this.setState({\n        value: this.state.value + event.target.innerText,\n        isResult: false,\n      });\n    } else if (\n      /[-+/x]/.test(this.state.value[this.state.value.length - 2]) &&\n      /-/.test(this.state.value[this.state.value.length - 1])\n    ) {\n      let newVal =\n        this.state.value.slice(0, this.state.value.length - 2) +\n        event.target.innerText;\n      this.setState({\n        value: newVal,\n      });\n    } else if (\n      /[-+/x]/.test(this.state.value[this.state.value.length - 1]) &&\n      event.target.innerText !== \"-\"\n    ) {\n      let newVal =\n        this.state.value.slice(0, this.state.value.length - 1) +\n        event.target.innerText;\n      this.setState({\n        value: newVal,\n      });\n    } else {\n      this.displayInnerText(event);\n    }\n  };\n\n  addDecimal = (event) => {\n    var dot = event.target.innerText;\n    let singleNumberArr = this.state.value.split(/[-+/x]/);\n    //only check last number in number array\n    if (/\\./.test(singleNumberArr[singleNumberArr.length - 1])) {\n      return;\n    } else {\n      this.setState({\n        value: this.state.value + dot,\n      });\n    }\n  };\n\n  clearNumber = () => {\n    this.setState({\n      value: 0,\n    });\n  };\n\n  calculate = () => {\n    var numbersArr;\n    let value = this.state.value;\n    //if two operators are next to each other and the second one is a minus, keep the minus\n    let regex = /[-+/x]-/;\n    if (regex.test(value)) {\n      numbersArr = value.split(/[+/x]/);\n    } else {\n      numbersArr = value.split(/[-+/x]/);\n    }\n    // convert str to number\n    numbersArr = numbersArr.map((str) => Number(str));\n\n    var operatorsArr = value.match(/[-+/x]/g);\n\n    //store first number as result\n    var result = numbersArr[0];\n\n    for (let i = 1; i < numbersArr.length; i++) {\n      switch (operatorsArr[i - 1]) {\n        case \"+\":\n          result += numbersArr[i];\n          break;\n        case \"-\":\n          result -= numbersArr[i];\n          break;\n        case \"x\":\n          result *= numbersArr[i];\n          break;\n        case \"/\":\n          result /= numbersArr[i];\n          break;\n      }\n    }\n\n    this.setState({\n      value: result,\n      isResult: true,\n    });\n  };\n\n  render() {\n    return (\n      <div id=\"calculator\">\n        <Display value={this.state.value} />\n\n        <div id=\"key-container\">\n          <button id=\"clear\" onClick={this.clearNumber}>\n            AC\n          </button>\n          <button id=\"divide\" onClick={this.addOperator}>\n            /\n          </button>\n          <button id=\"multiply\" onClick={this.addOperator}>\n            x\n          </button>\n          <button id=\"seven\" onClick={this.displayInnerText}>\n            7\n          </button>\n          <button id=\"eight\" onClick={this.displayInnerText}>\n            8\n          </button>\n          <button id=\"nine\" onClick={this.displayInnerText}>\n            9\n          </button>\n          <button id=\"subtract\" onClick={this.addOperator}>\n            -\n          </button>\n          <button id=\"four\" onClick={this.displayInnerText}>\n            4\n          </button>\n          <button id=\"five\" onClick={this.displayInnerText}>\n            5\n          </button>\n          <button id=\"six\" onClick={this.displayInnerText}>\n            6\n          </button>\n          <button id=\"add\" onClick={this.addOperator}>\n            +\n          </button>\n          <button id=\"one\" onClick={this.displayInnerText}>\n            1\n          </button>\n          <button id=\"two\" onClick={this.displayInnerText}>\n            2\n          </button>\n          <button id=\"three\" onClick={this.displayInnerText}>\n            3\n          </button>\n          <button id=\"equals\" onClick={this.calculate}>\n            =\n          </button>\n          <button id=\"zero\" onClick={this.displayInnerText}>\n            0\n          </button>\n          <button id=\"decimal\" onClick={this.addDecimal}>\n            .\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Calculator;\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Calculator from \"./components/calculator-box\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Calculator />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}